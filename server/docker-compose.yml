version: '2'

networks:
  server_network:

services:
  server:
    image: gcr.io/wa2-g26-ticketing/wa2-g26-ticketing
    build:
      context: .
    container_name: server
    depends_on:
      - db
      - keycloak
      - loki
      - tempo
      - prometheus
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_APPLICATION_NAME=springboot-keycloak
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID=springboot-keycloak-client
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_AUTHORIZATION_GRANT_TYPE=password
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_SCOPE=openid,profile,roles
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/ticketingRealm
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_USER_NAME_ATTRIBUTE=preferred_username
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OAUTH2_CLIENT_CREDENTIALS_AUTHORIZATION_GRANT_TYPE=password
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/ticketingRealm
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/ticketingRealm/protocol/openid-connect/certs
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI=http://keycloak:8080/realms/ticketingRealm/protocol/openid-connect/token
      - JWT_AUTH_CONVERTER_RESOURCE_ID=springboot-keycloak-client
      - JWT_AUTH_CONVERTER_PRINCIPAL_ATTRIBUTE=preferred_username
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080/realms/ticketingRealm/protocol/openid-connect/auth
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OAUTH2_CLIENT_CREDENTIALS_CLIENT_ID=auth-client
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OAUTH2_CLIENT_CREDENTIALS_SCOPE=openid,profile,roles
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OAUTH2_CLIENT_CREDENTIALS_PROVIDER=keycloak
      - KEYCLOAK_REALM=ticketingRealm
      - KEYCLOAK_RESOURCE=springboot-keycloak-client
      - KEYCLOAK_SSL_REQUIRED=external
      - KEYCLOAK_PUBLIC_CLIENT=true
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
      - LOKI_HOST=loki
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411/api/v2/spans
    ports:
      - "8080:8080"
    networks:
      - server_network

  db:
    image: 'postgres:latest'
    container_name: db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - server_network

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak_auth
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command:
    - start-dev
    - --import-realm
    volumes:
      - keycloak_data:/opt/jboss/keycloak/standalone/data
      - ./keycloak_realm:/opt/keycloak/data/import
    networks:
      - server_network

  tempo:
    image: grafana/tempo
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "9411:9411" # zipkin
    networks:
      - server_network

  loki:
    depends_on:
      - tempo
    image: grafana/loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    networks:
      - server_network

  prometheus:
    image: prom/prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/etc/prometheus/data
    ports:
      - "9090:9090"
    networks:
      - server_network

  grafana:
    depends_on:
      - loki
      - tempo
      - prometheus
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - server_network

volumes:
  keycloak_data:
  postgres_data:
  tempo-data:
  prometheus-data: